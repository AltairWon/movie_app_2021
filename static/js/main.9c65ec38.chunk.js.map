{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","class","movie","medium_cover_image","React","Component","About","props","console","log","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6WA+CeA,MA1Cf,YAA4D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC/C,OACI,qBAAKC,UAAU,QAAf,SACI,eAAC,IAAD,CACIC,GAAI,CACAC,SAAU,eACVC,MAAO,CACHR,OACAC,QACAC,UACAC,SACAC,WARZ,UAYI,qBAAKK,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,SAA8BJ,IAC9B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,eAAd,SACKD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBR,UAAU,eAA1B,SACKO,GADIC,QAKjB,oBAAGR,UAAU,gBAAb,UAA8BH,EAAQY,MAAM,EAAG,KAA/C,mBC2JLC,G,kNA5CbP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAC+BC,IAAMC,IAAI,4DADzC,gBACaJ,EADb,EACHK,KAAQA,KAAQL,OAGvB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAJxB,2C,uDAMZ,WACEQ,KAAKN,c,oBAIP,WAAU,IAAD,EACuBM,KAAKhB,MAA3BQ,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASZ,UAAU,YAAnB,SACGW,EACC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGA,qBAAKoB,MAAM,SAAX,SACGR,EAAON,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEE3B,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,QANTsB,EAAM3B,e,GA5BV6B,IAAMC,Y,MC7HVC,MAbf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GAER,sBAAK1B,UAAU,kBAAf,UACI,qIAIA,6DCQG6B,E,uKAhBX,WAAqB,IAAD,EACcV,KAAKO,MAA3BI,EADQ,EACRA,SAAUC,EADF,EACEA,aACIC,IAAnBF,EAAS3B,OACR4B,EAAQE,KAAK,O,oBAGrB,WAAU,IACCH,EAAYX,KAAKO,MAAjBI,SACP,OAAGA,EAAS3B,MACD,+BAAO2B,EAAS3B,MAAMP,QAEtB,S,GAZE2B,IAAMC,W,MCWZU,MATf,WACE,OACE,sBAAKlC,UAAU,MAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uB,MCaSkC,MAbf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,cAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWb,IAChC,cAAC,IAAD,CAAOW,KAAK,aAAaE,UAAWT,QCV1CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAOFC,SAASC,eAAe,W","file":"static/js/main.9c65ec38.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\"\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link \r\n                to={{\r\n                    pathname: '/movie/${id}',\r\n                    state: {\r\n                        year,\r\n                        title,\r\n                        summary,\r\n                        poster,\r\n                        genres\r\n                    }\r\n                }}\r\n            >\r\n                <img src={poster} alt={title} title={title} />\r\n                <div className=\"movie_data\">\r\n                    <h3 className=\"movie_title\" >{title}</h3>\r\n                    <h5 className=\"movie_year\">{year}</h5>\r\n                    <ul className=\"moive_genres\">\r\n                        {genres.map((genre, index) => (\r\n                            <li key={index} className=\"genres_genre\">\r\n                                {genre}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <p className=\"movie_summary\">{summary.slice(0, 180)}....</p>\r\n                </div>\r\n                </Link>\r\n            </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport PropTypes from \"prop-types\"\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\"\r\n\r\n// TODO: props\r\n/*const foodILike = [\r\n  {\r\n    id:1,\r\n    name: \"Kimchi\",\r\n    image:\r\n      \"https://www.maangchi.com/wp-content/uploads/2014/06/whole-cabbage-kimchi.jpg\",\r\n      rating: 5\r\n  },\r\n  {\r\n    id:2,\r\n    name: \"Samgyeopsal\",\r\n    image:\r\n      \"https://i0.wp.com/seonkyounglongest.com/wp-content/uploads/2019/06/samgyeopsal-20.jpg?fit=1000%2C1495&ssl=1\",\r\n      rating: 4.3\r\n  }\r\n] //object list\r\n\r\n\r\nfunction renderFood(dish){\r\n  return <Food name={dish.name} picture={dish.image} />\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n  <div>\r\n    {console.log(foodILike.map(renderFood))}\r\n    {foodILike.map(renderFood)}\r\n  </div>\r\n\r\nfunction Food({name, picture, rating}) { \r\n  //react magic\r\n  //props object 내부에는 fav가 있다. 내부에서 얻는 방법 props.fav\r\n  //props는 argument로 간다. \r\n\r\n  return <div>\r\n    <h2>I like {name}</h2>\r\n    <h4>{rating}/5.0</h4>\r\n    <img src={picture} alt={name} />\r\n  </div>; \r\n  //이렇게 해도 component에다가 정보를 보낼 수 있다.\r\n  //component를 재사용가능하고 계속해서 반복해서 사용할 수 있다.\r\n  //{fav}를 사용해서 같은 object를 사용해서 react magic을 사용하는 것이다\r\n  //alt={name} 이거은 img 요소들은 alt prop가 있어야 하기에 사용하는 것\r\n}\r\n\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  picture: PropTypes.string.isRequired,\r\n  rating: PropTypes.number.isRequired\r\n};\r\n//propTypes는 console에서 어떠한 오류가 범해져 있는지를 파악하는 방법이다.\r\n//이거는 무조건 propTypes로 설정을 해줘야 한다.\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n  <div>\r\n    {foodILike.map(dish => (\r\n    <Food \r\n      key={dish.id} \r\n      name={dish.name} \r\n      picture={dish.image} \r\n      rating={dish.rating} \r\n    />\r\n    ))}\r\n  </div>\r\n  );\r\n}\r\n\r\n  \r\n<h1>Hello World!!</h1>\r\nHTML <div class=\"hello\">비슷하다.\r\nfood component에 fav라는 이름의 property를 kimchi라는 value로 prop name을 줬다.\r\nprops라는 개념을 잘 기억하자\r\n\r\n\r\n\r\n{foodILike.map(dish => <Food name={dish.name} picture={dish.image} />)}\r\nmap.function 이라는 개념. map.function을 통해서 object 리스트들을 보여지게 할 수 있다.\r\nmap은 여기서 뭐가 돌아오든 array로 돌려주기 때문이다.\r\nprop에다가 유니크한 key를 입력하기 위해서 id를 추가해준다\r\n*/\r\n\r\n// TODO: state\r\n/*class App extends React.Component{\r\n  state = {\r\n    count: 0\r\n  };\r\n  add = () => {\r\n    //this.setState({count: this.state.count + 1});\r\n    this.setState(current => ({count: current.count + 1}))};\r\n  minus = () => {\r\n    //this.setState({count: this.state.count -1});\r\n    this.setState(current => ({count: current.count - 1}))};\r\n  //setState를 호출하면 react는 state를 refresh하고 render function을 호출한다.\r\n  //setState를 호출할 때마다 react는 render할 것이다.\r\n\r\n  componentDidMount(){\r\n    console.log(\"component rendered\");\r\n  }\r\n  //componentDidMount = 이 component는 처음 render됐다라고 기본적으로 알려준다.\r\n\r\n  componentDidUpdate(){\r\n    console.log(\"I just updated\");\r\n  }\r\n  //componont가 업데이트를 했다는 증거. 무언가를 클릭하거나 사용을 할때 업데이트가 된다는 것을 알려준다.\r\n\r\n  componentWillUnmount(){\r\n    console.log(\"Good bye hello World\");\r\n  }\r\n  //component가 떠날때, 페이지가 바뀌거나 그럴때를 알려준다.\r\n\r\n\r\n  render() {\r\n    console.log(\"I'm rendering\");\r\n    return (\r\n    <div>\r\n      <h1>The number is {this.state.count}</h1>\r\n      <button onClick={this.add}>Add</button>\r\n      <button onClick={this.minus}>Minus</button>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n//class는 return이 아닌 render method를 가지고 잇음\r\n//react는 자동적으로 너의 class component의 render method를 자동으로 실행한다.\r\n//class component = state => object\r\n//App에서 data를 어떻게 바꾸어주나? state 가 class component에 있다. class이기 때문에 this.state.count로 정해준다\r\n//mount는 생셔나는 것, 태어나는 것, 살아 있는것\r\n*/\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n  getMovies = async () => {\r\n    const {data: { data : {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n    //axios = fetch위에 있는 작은 layer\r\n    //await는 기다린다 axios를 기다린다고 생각하면 된다.\r\n    this.setState({movies, isLoading: false});\r\n  };\r\n  componentDidMount(){\r\n    this.getMovies();\r\n  }\r\n  //data를 fetch했다\r\n\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\"> \r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">Loading...</span>\r\n            </div>\r\n          ) : (\r\n            <div class=\"movies\">\r\n              {movies.map(movie => (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </section>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n    console.log(props);\r\n    return(\r\n        <div className=\"about_container\">\r\n            <span>\r\n                \"Freedom is the freedom to say that two plus two make four. If that is\r\n                granted, all else follows\"\r\n            </span>\r\n            <span>- George Orwell, 1984</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nclass Detail extends React.Component{\r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if(location.state === undefined){\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render() {\r\n        const {location} = this.props;\r\n        if(location.state) {\r\n            return <span>{location.state.title}</span>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n  //rendering 하는 방향\n  //exact = rendering을 안한다는 뜻\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, //component - HTML을 반환하는 함수. Appl.js에서 function. application 함수가 있으니까 이것을 반환할 것이다.\n  //react는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다!\n  //javascript와 HTML사이의 이러한 조합을 jsx라고 부른다. react에서만 custom할 수 있는 조합\n  //원래 react application은 한번에 하나의 component만 redering할 수 있다. 인식을 할 수 있다.\n\n\n  document.getElementById('root') //react 는 App.js 에다가 존재를 하게 하기 위해서는 ElementByld내부에 넣으려고 한다.\n  //virtual DOM(virtual document object model) = 존재하지 않는다. 소스코드에는 존재하지 않지만 react에서 만들어진다.\n);"],"sourceRoot":""}