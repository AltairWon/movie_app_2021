{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","class","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RA2BeA,MAvBf,YAAyD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,SAA8BJ,IAC9B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,UAAd,SAAyBD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAkB,oBAAgBL,UAAU,eAA1B,SAA0CI,GAAjCC,QAC/D,oBAAGL,UAAU,gBAAb,UAA8BH,EAAQS,MAAM,EAAG,KAA/C,iBC8KDC,G,kNA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAC+BC,IAAMC,IAAI,4DADzC,gBACaJ,EADb,EACHK,KAAQA,KAAQL,OAGvB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAJxB,2C,uDAMZ,WACEQ,KAAKN,c,oBAIP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGA,qBAAKkB,MAAM,SAAX,SACGR,EAAOP,KAAI,SAAAgB,GAAK,OACf,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVzB,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAME,mBACdtB,OAAQoB,EAAMpB,QANToB,EAAMC,e,GA5BXE,IAAMC,YCzIxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAOFC,SAASC,eAAe,W","file":"static/js/main.55582157.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\"\r\n\r\nfunction Movie({ year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\" >{title}</h3>\r\n                <h5 className=\"movie_year\">{year}</h5>\r\n                <ul className=\"generes\">{genres.map((genre, index) => <li key={index} className=\"genres_genre\">{genre}</li>)}</ul>\r\n                <p className=\"movie_summary\">{summary.slice(0, 180)}....</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport PropTypes from \"prop-types\"\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"\n\n// TODO: props\n/*const foodILike = [\n  {\n    id:1,\n    name: \"Kimchi\",\n    image:\n      \"https://www.maangchi.com/wp-content/uploads/2014/06/whole-cabbage-kimchi.jpg\",\n      rating: 5\n  },\n  {\n    id:2,\n    name: \"Samgyeopsal\",\n    image:\n      \"https://i0.wp.com/seonkyounglongest.com/wp-content/uploads/2019/06/samgyeopsal-20.jpg?fit=1000%2C1495&ssl=1\",\n      rating: 4.3\n  }\n] //object list\n\n\nfunction renderFood(dish){\n  return <Food name={dish.name} picture={dish.image} />\n}\n\nfunction App() {\n  return (\n    \n  <div>\n    {console.log(foodILike.map(renderFood))}\n    {foodILike.map(renderFood)}\n  </div>\n\nfunction Food({name, picture, rating}) { \n  //react magic\n  //props object 내부에는 fav가 있다. 내부에서 얻는 방법 props.fav\n  //props는 argument로 간다. \n\n  return <div>\n    <h2>I like {name}</h2>\n    <h4>{rating}/5.0</h4>\n    <img src={picture} alt={name} />\n  </div>; \n  //이렇게 해도 component에다가 정보를 보낼 수 있다.\n  //component를 재사용가능하고 계속해서 반복해서 사용할 수 있다.\n  //{fav}를 사용해서 같은 object를 사용해서 react magic을 사용하는 것이다\n  //alt={name} 이거은 img 요소들은 alt prop가 있어야 하기에 사용하는 것\n}\n\nFood.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired\n};\n//propTypes는 console에서 어떠한 오류가 범해져 있는지를 파악하는 방법이다.\n//이거는 무조건 propTypes로 설정을 해줘야 한다.\n\n\n\nfunction App() {\n  return (\n    \n  <div>\n    {foodILike.map(dish => (\n    <Food \n      key={dish.id} \n      name={dish.name} \n      picture={dish.image} \n      rating={dish.rating} \n    />\n    ))}\n  </div>\n  );\n}\n\n  \n<h1>Hello World!!</h1>\nHTML <div class=\"hello\">비슷하다.\nfood component에 fav라는 이름의 property를 kimchi라는 value로 prop name을 줬다.\nprops라는 개념을 잘 기억하자\n\n\n\n{foodILike.map(dish => <Food name={dish.name} picture={dish.image} />)}\nmap.function 이라는 개념. map.function을 통해서 object 리스트들을 보여지게 할 수 있다.\nmap은 여기서 뭐가 돌아오든 array로 돌려주기 때문이다.\nprop에다가 유니크한 key를 입력하기 위해서 id를 추가해준다\n*/\n\n// TODO: state\n/*class App extends React.Component{\n  state = {\n    count: 0\n  };\n  add = () => {\n    //this.setState({count: this.state.count + 1});\n    this.setState(current => ({count: current.count + 1}))};\n  minus = () => {\n    //this.setState({count: this.state.count -1});\n    this.setState(current => ({count: current.count - 1}))};\n  //setState를 호출하면 react는 state를 refresh하고 render function을 호출한다.\n  //setState를 호출할 때마다 react는 render할 것이다.\n\n  componentDidMount(){\n    console.log(\"component rendered\");\n  }\n  //componentDidMount = 이 component는 처음 render됐다라고 기본적으로 알려준다.\n\n  componentDidUpdate(){\n    console.log(\"I just updated\");\n  }\n  //componont가 업데이트를 했다는 증거. 무언가를 클릭하거나 사용을 할때 업데이트가 된다는 것을 알려준다.\n\n  componentWillUnmount(){\n    console.log(\"Good bye hello World\");\n  }\n  //component가 떠날때, 페이지가 바뀌거나 그럴때를 알려준다.\n\n\n  render() {\n    console.log(\"I'm rendering\");\n    return (\n    <div>\n      <h1>The number is {this.state.count}</h1>\n      <button onClick={this.add}>Add</button>\n      <button onClick={this.minus}>Minus</button>\n    </div>\n    );\n  }\n}\n//class는 return이 아닌 render method를 가지고 잇음\n//react는 자동적으로 너의 class component의 render method를 자동으로 실행한다.\n//class component = state => object\n//App에서 data를 어떻게 바꾸어주나? state 가 class component에 있다. class이기 때문에 this.state.count로 정해준다\n//mount는 생셔나는 것, 태어나는 것, 살아 있는것\n*/\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {data: { data : {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    //axios = fetch위에 있는 작은 layer\n    //await는 기다린다 axios를 기다린다고 생각하면 된다.\n    this.setState({movies, isLoading: false});\n  };\n  componentDidMount(){\n    this.getMovies();\n  }\n  //data를 fetch했다\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\"> \n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n            </div>\n          ) : (\n            <div class=\"movies\">\n              {movies.map(movie => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                />\n              ))}\n            </div>\n          )}\n        </section>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, //component - HTML을 반환하는 함수. Appl.js에서 function. application 함수가 있으니까 이것을 반환할 것이다.\n  //react는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다!\n  //javascript와 HTML사이의 이러한 조합을 jsx라고 부른다. react에서만 custom할 수 있는 조합\n  //원래 react application은 한번에 하나의 component만 redering할 수 있다. 인식을 할 수 있다.\n\n\n  document.getElementById('root') //react 는 App.js 에다가 존재를 하게 하기 위해서는 ElementByld내부에 넣으려고 한다.\n  //virtual DOM(virtual document object model) = 존재하지 않는다. 소스코드에는 존재하지 않지만 react에서 만들어진다.\n);"],"sourceRoot":""}